/* 1) Write a query to calculate the total revenue generated by each pizza size. Display the results as a list of sizes 
(their human-readable names) and their total revenue. */
SELECT 
    size AS pizza_size, Round(SUM(quantity * price), 2) AS total_revenue
FROM 
    order_details ord
JOIN 
    pizzas piz ON ord.pizza_id = piz.pizza_id
GROUP BY 
        size
ORDER BY 
    total_revenue DESC



/* 2) Write a query to display all chicken pizza orders in July and August.along with the size 
and price of the pizzas ordered.*/
SELECT
    od.order_id, name,category, size, price
FROM
    pizza_types pit
JOIN
    pizzas piz ON pit.pizza_type_id = piz.pizza_type_id
JOIN
    order_details ord ON piz.pizza_id =ord.pizza_id
JOIN
    orders od ON od.order_id = ord.order_id
WHERE 
    category = 'Chicken'
AND MONTH(date) in (7,8)


/* 3) Write a query to find all pizzas where the ingredients field is either empty or contains only "Mozzarella Cheese" 
and "Tomato" */
SELECT
    name, ingredients, category
FROM
    pizza_types
WHERE
    ingredients IS NULL OR TRIM(ingredients) LIKE '%Mozzarella Cheese,Tomato%' AND TRIM(ingredients) LIKE '%Tomato,Mozzarella Cheese%'



-- 4) Write a query to count the number of orders placed each hour usingthe time field.
SELECT 
    DATEPART(HOUR, time) Hour_of_the_day, COUNT(order_id) total_order
FROM 
    orders
GROUP BY
    DATEPART(HOUR, time)
ORDER BY
    Hour_of_the_day



-- 5) Write a query to calculate the average price of pizzas for each category.
SELECT
    category, ROUND(AVG(price), 2) Average_Price
FROM
    pizzas piz
JOIN
    pizza_types pit ON piz.pizza_type_id = pit.pizza_type_id
GROUP BY
    category




-- 6) Retrieve all pizzas ordered on Fridays using the date field. Include the pizza_name, order_id, and date.
SELECT
    od.order_id, name Pizza_Name, date
FROM
    orders od
JOIN
    order_details ord ON od.order_id = ord.order_id
JOIN
    pizzas piz ON ord.pizza_id  = piz.pizza_id
JOIN
    pizza_types pit ON piz.pizza_type_id = pit.pizza_type_id 
WHERE 
    DATENAME(WEEKDAY, date) = 'FRIDAY'
 


 -- 7) Write a query to identify the top 3 most ordered pizza types.
SELECT
    TOP 3 name, SUM(quantity) Total_Quantity
FROM
    order_details ord
JOIN
    pizzas piz ON ord.pizza_id = piz.pizza_id
JOIN
    pizza_types pit ON piz.pizza_type_id = pit.pizza_type_id
GROUP BY
    name
ORDER BY
    Total_Quantity DESC

/* 8) Write a query to calculate the total quantity ordered for each pizzatype. Display the results as a list of pizza types 
and their total quantities. Sort this by the quantity in descending order. */
SELECT
    name pizza_type, SUM(quantity) Total_Quantity
FROM
    pizza_types pit
JOIN
    pizzas piz ON piz.pizza_type_id = pit.pizza_type_id
JOIN
    order_details ord ON ord.pizza_id = piz.pizza_id
GROUP BY
    name
ORDER BY
    Total_Quantity DESC



-- 9) Write a query to find all orders where the total revenue is greater than $100.
SELECT
    order_id, ROUND(SUM(quantity * price), 2) Total_quantity
FROM
    order_details ord
JOIN
    pizzas piz ON ord.pizza_id = piz.pizza_id
GROUP BY
    order_id
HAVING
    SUM(quantity * price) > 100
ORDER BY
    Total_quantity DESC


-- 10) Determine which day of the week had the highest number of orders.
SELECT 
    TOP 1 DATENAME(WEEKDAY, date) Day_of_the_Week, COUNT(order_id) Total_orders
FROM
    orders od
GROUP BY
    DATENAME(WEEKDAY, date)
ORDER BY
    Total_orders DESC


-- 11) Write a query to find all pizzas where the ingredients field contains"Red Pepper" but does not contain "Pepperoni".
SELECT
    name, ingredients
FROM
    pizza_types
WHERE
    ingredients LIKE '%Red Pepper%' AND ingredients NOT LIKE '%Pepperoni%'



-- 12) Write a query to count the number of orders placed after 12:00 PM.Include the order_id, name, size and time.
SELECT
    od.order_id, name, size, time
FROM
    orders od
JOIN
    order_details ord ON od.order_id = ord.order_id
JOIN
    pizzas piz ON piz.pizza_id = ord.pizza_id
JOIN
    pizza_types pit ON piz.pizza_type_id = pit.pizza_type_id
WHERE
    CAST(time AS TIME) > '12:00:00'

SELECT
    COUNT(DISTINCT order_id) Num_orders_Afternoon
FROM
    orders
WHERE
    CAST(time AS TIME) > '12:00:00'


/* 13) Write a query to find the cheapest pizza in each category, including the pizza name. Use the price field from the pizzas table 
and the name and category fields from the pizza_types table. Return the results as a list that includes the category, pizza name, and price, 
sorted by category. */
WITH CategoryMinPrice AS 
(SELECT 
    category, MIN(price) AS min_price 
FROM 
    pizzas piz
JOIN 
    pizza_types pit ON piz.pizza_type_id = pit.pizza_type_id
GROUP BY 
    category
)
SELECT 
    pit.category, name AS pizza_name, price
FROM 
    pizzas piz
JOIN 
    pizza_types pit ON piz.pizza_type_id = pit.pizza_type_id
JOIN 
    CategoryMinPrice cmp ON pit.category = cmp.category AND price = cmp.min_price
ORDER BY 
    pit.category



/* 14) Write a query to calculate the total revenue generated by each customer using the order_id, quantity, and price fields. 
Assume each order_id corresponds to a unique customer. */
Select 
    order_id Customer, ROUND(SUM(quantity * price), 2) Total_Revenue
From
    order_details ord
JOIN
    pizzas piz ON ord.pizza_id = piz.pizza_id
GROUP BY
    order_id
ORDER BY
    Total_Revenue DESC

/* 15) Formulate a business question related to customer behavior. Write an SQL query to answer it.
Which pizza category generates the highest total revenue from customer orders */
SELECT 
    category, ROUND(SUM(quantity * price), 2) Total_Revenue
FROM 
    order_details ord
JOIN 
    pizzas piz ON ord.pizza_id = piz.pizza_id
JOIN 
    pizza_types pit ON piz.pizza_type_id = pit.pizza_type_id
GROUP BY 
    category
ORDER BY 
    total_revenue DESC


/* 16) Formulate a business question related to product performance. Write an SQL query to answer it.
Which pizza size generates the highest total revenue */
SELECT 
    size, ROUND(SUM(quantity * price), 2) Total_Revenue
FROM 
    order_details ord
JOIN 
    pizzas piz ON ord.pizza_id = piz.pizza_id
GROUP BY 
    size
ORDER BY 
    Total_Revenue DESC


/* 17) Generate a business question related to operational efficiency. Write an SQL query to answer it.
What are the peak hours for pizza orders, and how many orders are placed in each hour */
SELECT 
    DATEPART(HOUR, time) Order_Hour, COUNT(order_id) Total_Orders
FROM 
    orders
GROUP BY 
    DATEPART(HOUR, time)
ORDER BY 
    Total_Orders DESC


/* 18) What Is the Difference Between WHERE and HAVING?
WHERE filters rows before grouping; HAVING filters groups after aggregation.
Use WHERE with raw data, and HAVING with aggregate functions like SUM(), COUNT(), etc. */


/* 19) Why Is Data Normalization Important?
Data normalization is important because it reduces data redundancy, improves data integrity, 
and makes databases more efficient and easier to maintain. */


/* 20) What is the difference between CTE and Window Function?
A CTE (Common Table Expression) is a temporary result set used to simplify complex queries and improve readability. 
A Window Function performs calculations across rows related to the current row without collapsing them, like running totals or ranks. */


